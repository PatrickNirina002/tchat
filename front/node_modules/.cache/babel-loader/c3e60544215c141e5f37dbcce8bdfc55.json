{"ast":null,"code":"import _toConsumableArray from \"/home/patrick/Bureau/sociaux/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/patrick/Bureau/sociaux/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/patrick/Bureau/sociaux/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/patrick/Bureau/sociaux/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/patrick/Bureau/sociaux/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/patrick/Bureau/sociaux/front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/patrick/Bureau/sociaux/front/src/Chat.js\";\nimport React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\nvar URL = 'ws://localhost:3030';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chat, _Component);\n\n  function Chat() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chat)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: 'Bob',\n      messages: []\n    };\n    _this.ws = new WebSocket(URL);\n\n    _this.addMessage = function (message) {\n      return _this.setState(function (state) {\n        return {\n          messages: [message].concat(_toConsumableArray(state.messages))\n        };\n      });\n    };\n\n    _this.submitMessage = function (messageString) {\n      // on submitting the ChatInput form, send the message, add it to the list and reset the input\n      var message = {\n        name: _this.state.name,\n        message: messageString\n      };\n\n      _this.ws.send(JSON.stringify(message));\n\n      _this.addMessage(message);\n    };\n\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.ws.onopen = function () {\n        // on connecting, do nothing but log it to the console\n        console.log('connected');\n      };\n\n      this.ws.onmessage = function (evt) {\n        // on receiving a message, add it to the list of messages\n        var message = JSON.parse(evt.data);\n\n        _this2.addMessage(message);\n      };\n\n      this.ws.onclose = function () {\n        console.log('disconnected'); // automatically try to reconnect on connection loss\n\n        _this2.setState({\n          ws: new WebSocket(URL)\n        });\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Name:\\xA0\", React.createElement(\"input\", {\n        type: \"text\",\n        id: 'name',\n        placeholder: 'Enter your name...',\n        value: this.state.name,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            name: e.target.value\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })), React.createElement(ChatInput, {\n        ws: this.ws,\n        onSubmitMessage: function onSubmitMessage(messageString) {\n          return _this3.submitMessage(messageString);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), this.state.messages.map(function (message, index) {\n        return React.createElement(ChatMessage, {\n          key: index,\n          message: message.message,\n          name: message.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return Chat;\n}(Component);\n\nexport default Chat;","map":{"version":3,"sources":["/home/patrick/Bureau/sociaux/front/src/Chat.js"],"names":["React","Component","ChatInput","ChatMessage","URL","Chat","state","name","messages","ws","WebSocket","addMessage","message","setState","submitMessage","messageString","send","JSON","stringify","onopen","console","log","onmessage","evt","parse","data","onclose","e","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\n\nconst URL = 'ws://localhost:3030'\n\nclass Chat extends Component {\n  state = {\n    name: 'Bob',\n    messages: [],\n  }\n\n  ws = new WebSocket(URL)\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n    }\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data)\n      this.addMessage(message)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.setState({\n        ws: new WebSocket(URL),\n      })\n    }\n  }\n\n  addMessage = message =>\n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { name: this.state.name, message: messageString }\n    this.ws.send(JSON.stringify(message))\n    this.addMessage(message)\n  }\n\n  render() {\n    return (\n      <div>\n        <label htmlFor=\"name\">\n          Name:&nbsp;\n          <input\n            type=\"text\"\n            id={'name'}\n            placeholder={'Enter your name...'}\n            value={this.state.name}\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </label>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n        {this.state.messages.map((message, index) =>\n          <ChatMessage\n            key={index}\n            message={message.message}\n            name={message.name}\n          />,\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}